package lab3;
import java.math.BigInteger;
import java.util.Scanner;
import java.io.File;
import java.util.ArrayList;
import java.security.MessageDigest;


public class lab3 {
	public static void main(String[] args)
	{
	 long StartTime = System.currentTimeMillis();
	 
	 BigInteger N, N1, N2, N3, C1, C2, C3, c, d, e, password_hash, N64;
	 
	 // Initialize each of the above variables here. Hard-code the values, as in:
	 // N = create a BigInteger containing the value of N I provided you
	 // N1 = create a BigInteger containing the value of N1 I provided you …
	 
	 // Task 1
	 c = new BigInteger("22e09cdd7ffa0ee3254194e2ada6449f4c89284fa0709f351267dacf40388ad94e7ff581196c3b89337503fb58c3d872714efe62a4098501d156da72a4cfd1dd5e06e48cb3bf95116a08a5e784f9f827b8de777ece2da7ea8225b50008e20c441228a75079798ad22e27c24de9d821c8ee7c72463fdc5f2d8795c72923d71f7d", 16);
	 d = new BigInteger("5a9532507751e0a540e8bdbc610716356333f74269308d6b99fa66712b6b3b1cf3b88be9083ede0a294702c9929849e997ce37b3638a1a25feca6fe2a608d52a13eaa4dade827fa4641bea06d0b37ee4742fee4135581aaf9cdd70fc80049131383f2f7cc29dfbdd9f43b7971997fe2a4d512583a4f2e72781c0dbb55e5b9c01", 16);
	 N = new BigInteger("ab74f9a758bdedf3f1e85480efefd8b2d1eeaff55b3b148e4029a4feb664212f315f1c2abca0b2765a81fb6400b93b29e40551e006220d9aeb89928d2ccd5515d1fa4d1694cb0961fa1b4bd126fc52ec354d9e9719984ee31913717baf7cfc6e09b9c6c5c28eddf9ce85a219e903e7cd992f618bdee886e15e4c1478772c8767", 16);
	 e = new BigInteger("10001", 16);
	 N1 = new BigInteger("a171f509ce3fe3829d3f1f7bb069b8aa8ae472720cfa4c3d3dbf76636cccaaf2a9ab35f9c3de6e62110fb155d3856ae3bef6e66659827bfa894fcf0f395157b773b0e15731e8e4982f05669551a6021ff110b0c5fd1d113e47e2e1a3c0f2dc2c5489323218aab0c0b0362adea37725999839d19a309d8ef43f3c356af8e21f09", 16);
	 N2 = new BigInteger("a66dd710dc53a7d6c0201b52ed887ac1d841ec99391e0d200965408dca914d49db0e50e7f17f354cbfdf49e7c58049bb15133e3cd7ae38a869afbfa091dad7b06902b02ac9c38b18ff42e96e65e80c387c2f91ab9a8fe58e44d7e6a0333229cd0e8a72c183c6b15c00f1bd4111c319a2a2d2bba1d12941fcb67c2b939e4fd72d", 16);       
	 N3 = new BigInteger("98f785d12ace759f0964657ae1ffcd121851773f1718d93d6ded058e332aa96e96bc5421a6e8a404247f524ae87a1ef50eecd31a76b2f448609863ba02ae73ed19c3b9bb9ec6e594b70858dca30bbd372f6d1bdb1040157959b12017dd2f11b3de1d8d7a8b35cbabc720919ebae7acbe279144cdf415738ce408fbd33093623d", 16);        
	 C1 = new BigInteger("14ce6dee638ab29a5004e4b9c2cb596694655260b28a7931822fec32164e45a58e9d0b519dc27f1723cca61ace78c0196ba63239ab049889a6609dd388309b81e329dda8a5ef691e0db20b9a0710f394e3150da3e22e2b8cac4f6b640be4ed00b0af6c33c299bf5f3e68a81e40e12c27fa9035377c01fc317c91c21055871bfa", 16);
	 C2 = new BigInteger("02db8a41a6fc157d8511ef40d11ab1f630225d8bec229ad0fc13818e28474adb2332edd4fd841c0f2c33b9629b8eee38022b184e9b8d5f26e7e29aa5064815f096995051ee61f6f262718d5a23bd099460d70f9487b169411f40dbe0368d8dd357c1ea50bf27a322270075eaa4ffac28ef30110a955d757cc7224f657e5eafcb", 16);
	 C3 = new BigInteger("8f6dfa30424193268f6e666b1e869fecc20cd59d74e3c3d92852d272e00cd1eeb3d61bcb08f2fd8d3103b87c33e02f3cd1e6e47de5aa284f0c66917ee5424d117303cf442c41b0f8827af800d701a0f63caaae6d90e40952889b19526f7d5b35a679e94ebe597244c7551a756e03b27d62caa2e0d0f6a5668455e6120fd28759", 16);      
	 password_hash = new BigInteger("29b3c5e99107ec4e77047083ba1dba917c61edd7b0a49f2951a9febccff333b0", 16);
	 N64  = new BigInteger("cd6273a337f86d5", 16);
	 
	 
	 System.out.println("Decrypting Message: " + decrypt_message(N, e, d, c));
	 
	 //BigInteger reEncryptedMessage = decrypt_message(N, e, d, c).modPow(e, N);
	 //System.out.println("Encrypted in Hex: "+ reEncryptedMessage.toString(16));
	  
	 
	 // Task 2
	 System.out.print("Cracking Hashed Salted Password: ");
	 String[] passwords = crack_hashed_password(password_hash, "Top_Passwords.txt");
	 if (passwords == null) System.out.println("No matching passwords found");
	 else System.out.println("Password = " + passwords[0] + " and salt = " + passwords[1]);
	 
	 
	 
	 // Task 3
	 System.out.print("Factors of " + N64.toString() + ": ");
	 BigInteger[] factors = get_factors(N64);
	 if (factors == null) System.out.println("Unable to factor " + N64.toString());
	 else System.out.println("Factor1: " + factors[0] + " Factor2: " + factors[1]);
	 System.out.println("Mult: "+ factors[0].multiply(factors[1]));
	 BigInteger PrivateKey = get_private_key_from_p_q_e(factors[0], factors[1], e);
	 // System.out.println("Private Key: " + PrivateKey.toString() + " (0x" + PrivateKey.toString(16) + ")");
	 
	 
	 /*
	 // Task 4
	 System.out.println("Recovered Message: " + recoverMessage(N1, N2, N3, C1, C2, C3));
	 */
	 

	 System.out.println("\nElapsed time: " + (System.currentTimeMillis() - StartTime) / 1000.0 + " seconds");
	
	}
	
	public static BigInteger decrypt_message(BigInteger N, BigInteger e, BigInteger d, BigInteger c) {
		//m ≡ c^d mod N
		return c.modPow(d, N);
	}	
	
	public static String[] crack_hashed_password(BigInteger PWHash, String passwordList) {
		
		ArrayList<String> PWSaltList = new ArrayList<String>();
		byte[] hashedPasswordBytes = PWHash.toByteArray();
		
		try{			
			File file = new File(passwordList);
			Scanner fileReader = new Scanner(file);
			while(fileReader.hasNextLine()) {
				String data = fileReader.nextLine();
				PWSaltList.add(data);
			}
			fileReader.close();
		}
		catch(Exception e){
			System.out.println("Error While Reading the File: " + e);
			return null;
		}
		
		try {
			MessageDigest md = MessageDigest.getInstance("SHA-256");
			String passwordSalt;
			byte[] hashedBytes;
			for(String password: PWSaltList) {
				for(String salt: PWSaltList){
					passwordSalt = password + salt;
					hashedBytes = md.digest(passwordSalt.getBytes());
					
			        if (MessageDigest.isEqual(hashedBytes, hashedPasswordBytes)) {
			        	String[] password_salt = {password, salt};
						return password_salt;
			        }
				}
			}
		}
		catch(Exception e) {
			System.out.println("Message Digest Error: " + e);
			return null;	
		}
		return null;	
	}

	public static BigInteger[] get_factors(BigInteger N){
		BigInteger factor1 = new BigInteger("1");
		BigInteger factor2 = new BigInteger("0");		
		BigInteger sum = new BigInteger("0");
		
		while(!(factor1.multiply(factor1)).equals(sum)){
			factor2 = factor2.add(BigInteger.ONE);
			sum = N.add(factor2.pow(2));
			factor1 = sum.sqrt();
		}
		return new BigInteger[]{factor1.add(factor2), factor1.subtract(factor2)};
 	}

	public static BigInteger get_private_key_from_p_q_e(BigInteger p, BigInteger q, BigInteger e){
		BigInteger N = p.multiply(q);
		BigInteger phi = (p.subtract(BigInteger.ONE)).multiply(q.subtract(BigInteger.ONE));
		BigInteger d = e.modInverse(phi);
		return d;
	}



}